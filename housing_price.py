# -*- coding: utf-8 -*-
"""housing_price

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k2hdgZYb9bRLI6y66Fey6I-yESREZOFh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/04_House_Price.csv')
df.head()

from google.colab import drive
drive.mount('/content/drive')

df_shape = df.shape
print(df_shape)

df.describe()

sns.jointplot(x ='n_hot_rooms', y = 'price', data = df)

sns.jointplot(x ='rainfall', y = 'price', data = df)

sns.jointplot(x ='crime_rate', y = 'price', data = df)

sns.countplot(x = 'airport', data = df)

sns.countplot(x = 'waterbody', data = df)

sns.countplot(x = 'bus_ter', data = df)

sns.scatterplot(x = 'n_hot_rooms', y = 'price', data = df)

df.info()

np.percentile(df.n_hot_rooms,[99])[0]

UV = np.percentile(df.n_hot_rooms,[99])[0]

df[df.n_hot_rooms > UV]

df[df.n_hot_rooms > 3*UV]

df.n_hot_rooms[df.n_hot_rooms > 3*UV] =3*UV

np.percentile(df.rainfall,[1])[0]

LV = np.percentile(df.rainfall,[1])[0]

df[df.rainfall < .4*LV]

df.rainfall[df.rainfall < .4*LV] = .4*LV

df.info()

df.describe()

avg = df.n_hos_beds.mean()

df['n_hos_beds'] = df.n_hos_beds.fillna(avg)

sns.jointplot(x = 'crime_rate', y = 'price', data = df)

df.crime_rate = np.log(1 + df.crime_rate)

df.info()

df.describe()

df['avg_dist'] = (df.dist1 + df.dist2 + df.dist3 + df.dist4)/4

df.head()

del df['dist1']
del df['dist2']
del df['dist3']
del df['dist4']

del  df['bus_ter']

df = pd.get_dummies(df)

bool_cols = df.select_dtypes(include='bool').columns
df[bool_cols] = df[bool_cols].astype(int)

df.head()

del df['airport_NO']

df.head()

df.corr()

del df['parks']

df.head()

import statsmodels.api as sn

X = sn.add_constant(df['room_num'])

lm = sn.OLS(df['price'], X).fit()

lm.summary()

from sklearn.linear_model import LinearRegression

y = df['price']

X = df[['room_num']]

lm2 = LinearRegression()

lm2.fit(X,y)

print(lm2.intercept_, lm2.coef_)

help(lm2)

lm2.predict(X)

"""Multiple regression analysis on python"""

lenreg = sns.jointplot(x = 'room_num', y = 'price', data = df , kind = 'reg')

#Mult_linear_regression_model

X_multi = df.drop('price', axis = 1)

X_multi.head()

Y_multi = df['price']

Y_multi.head()

X_multi_cons = sn.add_constant(X_multi)

X_multi_cons.head()

lm_mullti = sn.OLS(Y_multi, X_multi_cons).fit()

lm_mullti.summary()

lm3 = LinearRegression()

lm3.fit(X_multi, Y_multi)

print(lm3.intercept_, lm3.coef_)

#from sklearn.model_selection import train_test_split

#x_test, x_train, y_test, y_train = train_test_split(X_multi, Y_multi, test_size = 0.2,random_state = 0)

#print(x_test.shape, x_train.shape, y_test.shape, y_train.shape)

#lm_a = LinearRegression()

#lm_a.fit(x_train, y_train)

#y_test_a = lm_a.predict(x_test)

#y_train_a = lm_a.predict(x_train)

#from sklearn.metrics import r2_score

#r2_score?

#r2_score(y_test, y_test_a)

#r2_score(y_train, y_train_a)

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train,Y_test = train_test_split(X_multi, Y_multi, test_size = 0.2, random_state = 0)

X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

lm_a = LinearRegression()

lm_a.fit(X_train, Y_train)

Y_test_a = lm_a.predict(X_test)

Y_train_a = lm_a.predict(X_train)

from sklearn.metrics import r2_score

r2_score(Y_test, Y_test_a)

r2_score(Y_train, Y_train_a)

# Ridge and Lasso

from sklearn import preprocessing

Scaler = preprocessing.StandardScaler().fit(X_train)

X_train_s = Scaler.transform(X_train)

X_test_s = Scaler.transform(X_test)

from sklearn.linear_model import Ridge

lm_r = Ridge(alpha= 0.5)

lm_r.fit(X_train_s, Y_train)

r2_score(Y_test, lm_r.predict(X_test_s))

r2_score(Y_train, lm_r.predict(X_train_s))

from sklearn.model_selection import validation_curve

validation_curve?

param_range = np.logspace(-2,8,100)

param_range

train_score,test_score = validation_curve(Ridge(), X_train_s, Y_train, param_name = 'alpha', param_range = param_range)

print(train_score)
print(test_score)

train_mean = np.mean(train_score, axis = 1)

test_mean = np.mean(test_score, axis = 1)

train_mean

max(test_mean)

sns.jointplot(x = np.log(param_range), y = test_mean)

np.where (test_mean == max(test_mean))

param_range[31]

lm_r_best = Ridge(alpha = param_range[31])

lm_r_best.fit(X_train_s, Y_train)

r2_score(Y_test, lm_r_best.predict(X_test_s))

r2_score(Y_train, lm_r_best.predict(X_train_s))

#Lasso

from sklearn.linear_model import Lasso

lm_l = Lasso(alpha = 0.5)

lm_l = lm_l.fit(X_train_s, Y_train)

r2_score(Y_test, lm_l.predict(X_test_s))

r2_score(Y_train, lm_l.predict(X_train_s))

test_score, train_score = validation_curve(Lasso(), X_train_s, Y_train, param_name = 'alpha', param_range = param_range)

train_mean = np.mean(train_score, axis = 1)

test_mean = np.mean(test_score, axis = 1)

train_mean

max(train_mean)

sns.jointplot(x = np.log(param_range), y = test_mean)

np.where (test_mean == max(test_mean))

lm_r_best = Ridge(alpha = param_range[0])

lm_l = lm_l.fit(X_train_s, Y_train)

r2_score(Y_test, lm_l.predict(X_test_s))

r2_score(Y_train, lm_l.predict(X_train_s))